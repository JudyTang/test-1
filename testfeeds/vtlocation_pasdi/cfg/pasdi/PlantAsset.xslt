<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated by Altova MapForce 2012 YOU SHOULD NOT MODIFY 
	THIS FILE, BECAUSE IT WILL BE OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION. 
	Refer to the Altova MapForce Documentation for further details. http://www.altova.com/mapforce -->
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:env="http://data.schemas.tfn.thomson.com/Envelope/2008-05-01/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="env xs">
	<xsl:include href="Common.xslt" />

	<xsl:output method="xml" encoding="UTF-8" indent="yes" />
	<xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
	<xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
	<xsl:template match="/ContentItem">
		<xsl:element name="env:ContentItem">
			<xsl:attribute name="action">
				<xsl:value-of select="string(@action)" />
			</xsl:attribute>
			<xsl:for-each select="Data">
				<xsl:element name="env:Data">
					<xsl:attribute name="type">
						<xsl:value-of select="string('PlantAsset')" />
					</xsl:attribute>
					<xsl:for-each select="PlantAsset">
						<xsl:variable name="var_base" select="." />
						<xsl:element name="PlantAsset">
							<xsl:call-template name="el_simple">
								<xsl:with-param name="el" select="$var_base/cne_asset_id" />
								<xsl:with-param name="elName" select="'AssetID'" />
								<xsl:with-param name="attr_objectTypeId"
									select="string($var_base/cne_asset_id/@object_type_id)" />
								<xsl:with-param name="attr_objectType"
									select="string($var_base/cne_asset_id/@object_type)" />
							</xsl:call-template>

							<xsl:if test="PlantCityID or PlantCityRCS or PlantCity">
								<xsl:element name="PlantCity">
									<xsl:if test="string(PlantCityID) != ''">
										<xsl:copy-of select="PlantCityID" />
									</xsl:if>
									<xsl:if test="string(PlantCityRCS) != ''">
										<xsl:copy-of select="PlantCityRCS" />
									</xsl:if>
									<xsl:if test="string(PlantCity) != ''">
										<xsl:copy-of select="PlantCity" />
									</xsl:if>
								</xsl:element>
							</xsl:if>

							<xsl:call-template name="el_simple">
								<xsl:with-param name="el"
									select="$var_base/plant_labour_contract_expiry" />
								<xsl:with-param name="elName"
									select="'PlantLabourContractExpiryDate'" />
							</xsl:call-template>
							<xsl:call-template name="el_simple">
								<xsl:with-param name="el"
									select="$var_base/plant_target_date" />
								<xsl:with-param name="elName" select="'PlantTargetDate'" />
							</xsl:call-template>
							<xsl:call-template name="el_simple">
								<xsl:with-param name="el"
									select="$var_base/plant_data_source" />
								<xsl:with-param name="elName" select="'PlantDataSource'" />
							</xsl:call-template>

							<xsl:for-each select="PlantAssetSubType">
								<xsl:variable name="var_subType" select="." />
								<xsl:if test="child::*">
									<xsl:element name="PlantAssetSubType">
										<xsl:call-template name="el_simple">
											<xsl:with-param name="el"
												select="$var_base/plant_asset_type_data_source" />
											<xsl:with-param name="elName"
												select="'PlantAssetTypeDataSource'" />
										</xsl:call-template>

										<xsl:for-each select="PlantStatus">
											<xsl:if test="child::*">
												<xsl:element name="PlantStatus">
													<xsl:if test="status_type">
														<xsl:call-template name="el_simple">
															<xsl:with-param name="el" select="status_type" />
															<xsl:with-param name="elName" select="'PlantStatusType'" />
														</xsl:call-template>
													</xsl:if>
													<xsl:if test="status_type_value">
														<xsl:call-template name="el_simple">
															<xsl:with-param name="el" select="status_type_value" />
															<xsl:with-param name="elName"
																select="'PlantStatusTypeValue'" />
														</xsl:call-template>
													</xsl:if>
													<xsl:if test="status_note">
														<xsl:call-template name="el_simple">
															<xsl:with-param name="el" select="status_note" />
															<xsl:with-param name="elName" select="'PlantStatusNote'" />
															<xsl:with-param name="attr_languageId"
																select="string(number('505062'))" />
														</xsl:call-template>
													</xsl:if>
													<xsl:if test="status_data_source">
														<xsl:call-template name="el_simple">
															<xsl:with-param name="el" select="status_data_source" />
															<xsl:with-param name="elName"
																select="'PlantStatusNoteDataSource'" />
														</xsl:call-template>
													</xsl:if>
												</xsl:element>
											</xsl:if>
										</xsl:for-each>
										<xsl:for-each select="PlantOutage">
											<xsl:if test="child::*">
												<xsl:element name="PlantOutage">
													<xsl:call-template name="el_simple">
														<xsl:with-param name="el" select="outage_type" />
														<xsl:with-param name="elName" select="'PlantOutageType'" />
													</xsl:call-template>

													<xsl:if test="string(PlantOutageCountryID) != ''">														
														<!-- <xsl:call-template name="el_relation_id">
															<xsl:with-param name="el" select="outage_country_id" />
														</xsl:call-template>-->
														<xsl:copy-of select="PlantOutageCountryID" />														
													</xsl:if>

													<xsl:for-each select="outage_reason">
														<PlantOutageReason>
															<xsl:value-of select="string(.)" />
														</PlantOutageReason>
													</xsl:for-each>
													<xsl:for-each select="outage_from">
														<PlantOutageFrom>
															<xsl:value-of select="string(.)" />
														</PlantOutageFrom>
													</xsl:for-each>
													<xsl:for-each select="outage_to">
														<PlantOutageTo>
															<xsl:value-of select="string(.)" />
														</PlantOutageTo>
													</xsl:for-each>
													<xsl:for-each select="outage_unit">
														<PlantOutageUnit>
															<xsl:value-of select="string(.)" />
														</PlantOutageUnit>
													</xsl:for-each>
													<xsl:for-each select="outage_level">
														<PlantOutageLevel>
															<xsl:value-of select="string(.)" />
														</PlantOutageLevel>
													</xsl:for-each>
													<xsl:for-each select="outage_confidence_level">
														<PlantOutageConfidenceLevel>
															<xsl:value-of select="string(.)" />
														</PlantOutageConfidenceLevel>
													</xsl:for-each>
													<xsl:for-each select="outage_data_source_type">
														<PlantOutageDataSourceType>
															<xsl:value-of select="string(.)" />
														</PlantOutageDataSourceType>
													</xsl:for-each>
													<xsl:for-each select="outage_unit_number">
														<PlantOutageUnitNumber>
															<xsl:value-of select="string(.)" />
														</PlantOutageUnitNumber>
													</xsl:for-each>
													<xsl:for-each select="outage_corrected_date">
														<PlantOutageCorrectedDate>
															<xsl:value-of select="string(.)" />
														</PlantOutageCorrectedDate>
													</xsl:for-each>
													<xsl:for-each select="outage_reported_date">
														<PlantOutageReportedDate>
															<xsl:value-of select="string(.)" />
														</PlantOutageReportedDate>
													</xsl:for-each>
													<xsl:for-each select="outage_story_code">
														<PlantOutageStoryCode>
															<xsl:value-of select="string(.)" />
														</PlantOutageStoryCode>
													</xsl:for-each>
													<xsl:for-each select="outage_latest_change_reason">
														<PlantOutageLatestChangeReason>
															<xsl:value-of select="string(.)" />
														</PlantOutageLatestChangeReason>
													</xsl:for-each>
												</xsl:element>
											</xsl:if>
										</xsl:for-each>
										<xsl:for-each select="PlantNote">
											<PlantNote>
												<xsl:for-each select="plant_note_title">
													<PlantNoteTitle>
														<xsl:value-of select="string(.)" />
													</PlantNoteTitle>
												</xsl:for-each>
												<xsl:for-each select="plant_note_date">
													<PlantNoteDate>
														<xsl:value-of select="string(.)" />
													</PlantNoteDate>
												</xsl:for-each>
												<xsl:for-each select="plant_note_data_source">
													<PlantNoteDataSource>
														<xsl:value-of select="string(.)" />
													</PlantNoteDataSource>
												</xsl:for-each>
												<xsl:for-each select="plant_note_text">
													<PlantNoteText>
														<xsl:attribute name="languageId">505062</xsl:attribute>
														<xsl:value-of select="string(.)" />
													</PlantNoteText>
												</xsl:for-each>
												<xsl:for-each select="plant_story_code">
													<PlantNoteStoryCode>
														<xsl:value-of select="string(.)" />
													</PlantNoteStoryCode>
												</xsl:for-each>
											</PlantNote>
										</xsl:for-each>
										<xsl:for-each select="PlantStatistic">
											<PlantStatistic>
												<xsl:for-each select="statistic_type">
													<PlantStatisticType>
														<xsl:value-of select="string(.)" />
													</PlantStatisticType>
												</xsl:for-each>
												<xsl:for-each select="statistic_period_type">
													<PlantStatisticPeriodType>
														<xsl:value-of select="string(.)" />
													</PlantStatisticPeriodType>
												</xsl:for-each>
												<xsl:for-each select="statistic_year">
													<PlantStatisticYear>
														<xsl:value-of select="string(.)" />
													</PlantStatisticYear>
												</xsl:for-each>
												<xsl:for-each select="statistic_value">
													<PlantStatisticValue>
														<xsl:value-of select="string(.)" />
													</PlantStatisticValue>
												</xsl:for-each>
												<xsl:for-each select="statistic_measurement">
													<PlantStatisticMeasurement>
														<xsl:attribute name="languageId">505062</xsl:attribute>
														<xsl:value-of select="string(.)" />
													</PlantStatisticMeasurement>
												</xsl:for-each>
												<xsl:for-each select="statistic_validity_type">
													<PlantStatisticValidityType>
														<xsl:value-of select="string(.)" />
													</PlantStatisticValidityType>
												</xsl:for-each>
												<xsl:for-each select="statistic_data_source">
													<PlantStatisticDataSource>
														<xsl:value-of select="string(.)" />
													</PlantStatisticDataSource>
												</xsl:for-each>
											</PlantStatistic>
										</xsl:for-each>
										<xsl:if test="string($var_base/commodity_group_name)='PRECIOUS_METALS'">
											<xsl:for-each
												select="PlantStatistic[translate(statistic_measurement, $smallcase, $uppercase)='TROY OZ']">
												<PlantStatistic>
													<xsl:for-each select="statistic_type">
														<PlantStatisticType>
															<xsl:value-of select="string(.)" />
														</PlantStatisticType>
													</xsl:for-each>
													<xsl:for-each select="statistic_period_type">
														<PlantStatisticPeriodType>
															<xsl:value-of select="string(.)" />
														</PlantStatisticPeriodType>
													</xsl:for-each>
													<xsl:for-each select="statistic_year">
														<PlantStatisticYear>
															<xsl:value-of select="string(.)" />
														</PlantStatisticYear>
													</xsl:for-each>
													<xsl:for-each select="statistic_value">
														<PlantStatisticValue>
															<xsl:value-of
																select="format-number(. * 0.00003110347, '#################.############')" />
														</PlantStatisticValue>
													</xsl:for-each>
													<xsl:for-each select="statistic_measurement">
														<PlantStatisticMeasurement>
															<xsl:attribute name="languageId">505062</xsl:attribute>
															<xsl:value-of select="'Tonnes'" />
														</PlantStatisticMeasurement>
													</xsl:for-each>
													<xsl:for-each select="statistic_validity_type">
														<PlantStatisticValidityType>
															<xsl:value-of select="string(.)" />
														</PlantStatisticValidityType>
													</xsl:for-each>
													<xsl:for-each select="statistic_data_source">
														<PlantStatisticDataSource>
															<xsl:value-of select="string(.)" />
														</PlantStatisticDataSource>
													</xsl:for-each>
												</PlantStatistic>
											</xsl:for-each>
										</xsl:if>

										<xsl:for-each select="PlantCoalMine">
											<PlantCoalMine>
												<xsl:for-each select="coal_mine_coal_field">
													<PlantCoalMineCoalfield>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineCoalfield>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_type">
													<PlantCoalMineType>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineType>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_province">
													<PlantCoalMineProvince>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineProvince>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_seams">
													<PlantCoalMineSeams>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineSeams>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_seam_thickness">
													<PlantCoalMineSeamThickness>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineSeamThickness>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_total_thickness">
													<PlantCoalMineTotalThickness>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineTotalThickness>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_strip_ratio">
													<PlantCoalMineStripRatio>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineStripRatio>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_life">
													<PlantCoalMineMineLife>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineMineLife>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_opened">
													<PlantCoalMineOpened>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineOpened>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_close">
													<PlantCoalMineClosed>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineClosed>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_capacity">
													<PlantCoalMineCapacity>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineCapacity>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_data_source">
													<PlantCoalMineDataSource>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineDataSource>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_coal_rank">
													<PlantCoalMineCoalRank>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineCoalRank>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_coal_volatility">
													<PlantCoalMineCoalVolatility>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineCoalVolatility>
												</xsl:for-each>
												<xsl:for-each select="coal_mine_coal_use">
													<PlantCoalMineCoalUse>
														<xsl:value-of select="string(.)" />
													</PlantCoalMineCoalUse>
												</xsl:for-each>
											</PlantCoalMine>
										</xsl:for-each>
										<xsl:for-each select="PowerPlant">
											<PowerPlant>
												<xsl:if test="string(PlantPowerSystemOperatorNERCID) != ''">
													<xsl:element name="PlantPowerSystemOperatorNERCID">
														<xsl:call-template name="el_relation_id">
															<xsl:with-param name="el"
																select="PlantPowerSystemOperatorNERCID" />
														</xsl:call-template>
													</xsl:element>
												</xsl:if>
												<xsl:call-template name="el_simple">
													<xsl:with-param name="el"
														select="PlantPowerSystemOperatorNERC" />
													<xsl:with-param name="elName"
														select="'PlantPowerSystemOperatorNERC'" />
													<xsl:with-param name="attr_languageId"
														select="string(number('505062'))" />
												</xsl:call-template>

												<xsl:if test="string(PlantPowerSystemOperatorISOID) != ''">
													<xsl:element name="PlantPowerSystemOperatorISOID">
														<xsl:call-template name="el_relation_id">
															<xsl:with-param name="el"
																select="PlantPowerSystemOperatorISOID" />
														</xsl:call-template>
													</xsl:element>
												</xsl:if>
												<xsl:call-template name="el_simple">
													<xsl:with-param name="el"
														select="PlantPowerSystemOperatorISO" />
													<xsl:with-param name="elName"
														select="'PlantPowerSystemOperatorISO'" />
													<xsl:with-param name="attr_languageId"
														select="string(number('505062'))" />
												</xsl:call-template>

												<xsl:if
													test="$var_subType/PlantStatistic[statistic_type='Capacity']/statistic_value or 
															child::PlantPowerOutput or child::PlantPowerOutage">
													<xsl:element name="PlantPowerStatistics">
														<xsl:if
															test="$var_subType/PlantStatistic[statistic_type='Capacity']/statistic_value">
															<xsl:element name="PlantPowerCapacity">
																<xsl:value-of
																	select="$var_subType/PlantStatistic[statistic_type='Capacity']/statistic_value" />
															</xsl:element>
														</xsl:if>
														<xsl:for-each select="PlantPowerOutput">
															<PlantPowerOutput>
																<xsl:for-each select="PlantPowerYTDOutput">
																	<PlantPowerYTDOutput>
																		<xsl:value-of select="string(.)" />
																	</PlantPowerYTDOutput>
																</xsl:for-each>
																<xsl:for-each select="PlantPowerLastYearOutput">
																	<PlantPowerLastYearOutput>
																		<xsl:value-of select="string(.)" />
																	</PlantPowerLastYearOutput>
																</xsl:for-each>
															</PlantPowerOutput>
														</xsl:for-each>
														<xsl:for-each select="PlantPowerOutage">
															<PlantPowerOutage>
																<xsl:for-each select="PlantPowerOutageYTDDays">
																	<PlantPowerOutageYTDDays>
																		<xsl:value-of select="string(.)" />
																	</PlantPowerOutageYTDDays>
																</xsl:for-each>
																<xsl:for-each select="PlantPowerOutageLastYearDays">
																	<PlantPowerOutageLastYearDays>
																		<xsl:value-of select="string(.)" />
																	</PlantPowerOutageLastYearDays>
																</xsl:for-each>
																<xsl:for-each select="PlantPowerOutagePlan">
																	<PlantPowerOutagePlan>
																		<xsl:for-each select="outage_from">
																			<PlantPowerOutagePlanStartDate>
																				<xsl:value-of select="string(.)" />
																			</PlantPowerOutagePlanStartDate>
																		</xsl:for-each>
																		<xsl:for-each select="outage_to">
																			<PlantPowerOutagePlanEndDate>
																				<xsl:value-of select="string(.)" />
																			</PlantPowerOutagePlanEndDate>
																		</xsl:for-each>
																	</PlantPowerOutagePlan>
																</xsl:for-each>
															</PlantPowerOutage>
														</xsl:for-each>
													</xsl:element>
												</xsl:if>
											</PowerPlant>
										</xsl:for-each>

									</xsl:element>
								</xsl:if>
							</xsl:for-each>
						</xsl:element>
					</xsl:for-each>
				</xsl:element>
			</xsl:for-each>
		</xsl:element>
	</xsl:template>
</xsl:stylesheet>
