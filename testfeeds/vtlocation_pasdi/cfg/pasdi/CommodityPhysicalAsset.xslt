<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated by Altova MapForce 2012 YOU SHOULD NOT MODIFY 
	THIS FILE, BECAUSE IT WILL BE OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION. 
	Refer to the Altova MapForce Documentation for further details. http://www.altova.com/mapforce -->
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:env="http://data.schemas.tfn.thomson.com/Envelope/2008-05-01/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="env xs">
	<xsl:include href="Common.xslt" />

	<xsl:output method="xml" encoding="UTF-8" indent="yes" />
	<xsl:template match="/ContentItem">
		<xsl:element name="env:ContentItem">
			<xsl:attribute name="action">
				<xsl:value-of select="string(@action)" />
			</xsl:attribute>
			<xsl:for-each select="Data">
				<xsl:element name="env:Data">
					<xsl:attribute name="type">
						<xsl:value-of select="string('CommodityPhysicalAsset')" />
					</xsl:attribute>
					<xsl:for-each select="CommodityPhysicalAsset">
						<xsl:variable name="var_base" select="." />
						<xsl:element name="CommodityPhysicalAsset">
							<xsl:call-template name="el_simple">
								<xsl:with-param name="el" select="$var_base/cne_asset_id" />
								<xsl:with-param name="elName" select="'AssetID'" />
								<xsl:with-param name="attr_objectTypeId"
									select="string($var_base/cne_asset_id/@object_type_id)" />
								<xsl:with-param name="attr_objectType"
									select="string($var_base/cne_asset_id/@object_type)" />
							</xsl:call-template>
							<xsl:call-template name="el_simple">
								<xsl:with-param name="el" select="$var_base/admin_status" />
								<xsl:with-param name="elName" select="'AdminStatus'" />
								<xsl:with-param name="attr_effectiveFrom"
									select="string($var_base/effective_from)" />
							</xsl:call-template>
							<xsl:call-template name="el_simple">
								<xsl:with-param name="el"
									select="$var_base/permissionable_object" />
								<xsl:with-param name="elName"
									select="'AssetPermissionableObject'" />
							</xsl:call-template>

							<xsl:for-each select="AssetName[name_type='FULL NAME']">
								<xsl:element name="AssetFullName">
									<xsl:if test="string(effective_from) != ''">
										<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string(effective_from)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:if test="string(effective_to) != ''">
										<xsl:attribute name="effectiveTo">
												<xsl:value-of select="string(effective_to)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:attribute name="languageId">
										<xsl:value-of select="505062" />
									</xsl:attribute>
									<xsl:value-of select="string(name_value)" />
								</xsl:element>
							</xsl:for-each>
							<xsl:for-each select="AssetName[name_type='ALIAS']">
								<xsl:element name="AssetAliasName">
									<xsl:if test="string(effective_from) != ''">
										<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string(effective_from)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:if test="string(effective_to) != ''">
										<xsl:attribute name="effectiveTo">
												<xsl:value-of select="string(effective_to)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:attribute name="languageId">
										<xsl:value-of select="505062" />
									</xsl:attribute>
									<xsl:value-of select="string(name_value)" />
								</xsl:element>
							</xsl:for-each>

							<xsl:for-each select="AssetName[name_type='EX NAME']">
								<xsl:element name="AssetExName">
									<xsl:if test="string(effective_from) != ''">
										<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string(effective_from)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:if test="string(effective_to) != ''">
										<xsl:attribute name="effectiveTo">
												<xsl:value-of select="string(effective_to)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:attribute name="languageId">
										<xsl:value-of select="505062" />
									</xsl:attribute>
									<xsl:value-of select="string(name_value)" />
								</xsl:element>
							</xsl:for-each>
							<AssetType>
								<xsl:if test="string($var_base/entity_created_date) != ''">
									<xsl:attribute name="effectiveFrom">
											<xsl:value-of select="string($var_base/entity_created_date)" />
										</xsl:attribute>
								</xsl:if>
								<xsl:if test="string($var_base/asset_type_id) != ''">
									<xsl:element name="AssetTypeID">
										<xsl:call-template name="el_relation_id">
											<xsl:with-param name="el" select="$var_base/asset_type_id" />
										</xsl:call-template>
									</xsl:element>
								</xsl:if>
								<xsl:call-template name="el_simple">
									<xsl:with-param name="el" select="$var_base/asset_type_rcs" />
									<xsl:with-param name="elName" select="'AssetTypeRCS'" />
								</xsl:call-template>

								<xsl:call-template name="el_simple">
									<xsl:with-param name="el"
										select="$var_base/asset_type_value" />
									<xsl:with-param name="elName" select="'AssetType'" />
									<xsl:with-param name="attr_languageId" select="string(number('505062'))" />
								</xsl:call-template>

								<xsl:for-each select="$var_base/AssetStatus">
									<xsl:element name="AssetStatus">
										<xsl:call-template name="el_simple">
											<xsl:with-param name="el" select="AssetStatusType" />
											<xsl:with-param name="elName" select="'AssetStatusType'" />
											<xsl:with-param name="attr_languageId"
												select="string(number('505062'))" />
										</xsl:call-template>
										<xsl:call-template name="el_simple">
											<xsl:with-param name="el" select="AssetStatusTypeValue" />
											<xsl:with-param name="elName" select="'AssetStatusTypeValue'" />
											<xsl:with-param name="attr_languageId"
												select="string(number('505062'))" />
										</xsl:call-template>
									</xsl:element>
								</xsl:for-each>
							</AssetType>
							
							<xsl:for-each select="$var_base/AssetGeographicUnit">
								<xsl:if test="child::*">
									<xsl:element name="AssetGeographicUnit">
										<xsl:if test="string($var_base/entity_created_date) != ''"><!-- check -->
											<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string($var_base/entity_created_date)" />
											</xsl:attribute>
										</xsl:if>
										<xsl:if test="string(gun_perm_id) != ''">
											<xsl:element name="AssetGeographicUnitID">
												<xsl:call-template name="ves_gun_id">
													<xsl:with-param name="base" select="$var_base" />
													<xsl:with-param name="parentEl"
														select="." />
												</xsl:call-template>
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(rcs_code) != ''">
											<xsl:element name="AssetGeographicUnitRCS">
												<xsl:value-of select="string(rcs_code)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(gun_desc) != ''">
											<xsl:element name="AssetGeographicUnit">
												<xsl:attribute name="languageId">
														<xsl:value-of select="string(number('505062'))" />
													</xsl:attribute>
												<xsl:value-of select="string(gun_desc)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(guc_desc) != ''">
											<xsl:element name="AssetGeographicUnitType">
												<xsl:value-of select="string(guc_desc)" />
											</xsl:element>
										</xsl:if>
									<!-- <xsl:element name="AssetGeographicUnitRank">
											<xsl:value-of select="string(1)" /> 
										</xsl:element> -->
									</xsl:element>
								</xsl:if>
							</xsl:for-each>
							<xsl:for-each select="$var_base/VesselGeographicUnit">
								<xsl:if test="child::*">
									<xsl:element name="AssetGeographicUnit">
										<xsl:if test="string(relation_effective_from) != ''">
											<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string(relation_effective_from)" />
											</xsl:attribute>
										</xsl:if>
										<xsl:if test="string(zone_perm_id) != ''">
											<xsl:element name="AssetGeographicUnitID">
												<xsl:call-template name="ves_gun_id">
													<xsl:with-param name="base" select="$var_base" />
													<xsl:with-param name="parentEl"
														select="." />
												</xsl:call-template>
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(zone_code) != ''">
											<xsl:element name="AssetGeographicUnitRCS">
												<xsl:value-of select="string(zone_code)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(zone_name) != ''">
											<xsl:element name="AssetGeographicUnit">
												<xsl:attribute name="languageId">
														<xsl:value-of select="string(number('505062'))" />
													</xsl:attribute>												
												<xsl:value-of select="string(zone_name)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(zone_type) != ''">
											<xsl:element name="AssetGeographicUnitType">
												<xsl:value-of select="string(zone_type)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(zone_rank) != ''">
											<xsl:element name="AssetGeographicUnitRank">
												<xsl:value-of select="string(zone_rank)" />
											</xsl:element>
										</xsl:if>
									</xsl:element>
								</xsl:if>
							</xsl:for-each>
							<!-- AssetZoom -->
							<xsl:for-each select="$var_base/AssetZoom">
								<xsl:element name="AssetZoom">
									<xsl:if test="string(AssetZoomRegions) != ''">
										<xsl:element name="AssetZoomRegions">
											<xsl:value-of select="string(AssetZoomRegions)" />
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(AssetZoomRegionsRCS) != ''">
										<xsl:element name="AssetZoomRegionsRCS">
											<xsl:value-of select="string(AssetZoomRegionsRCS)" />
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(AssetZoomRegionsBoundsLat) != ''">
										<xsl:element name="AssetZoomRegionsBoundsLat">
											<xsl:value-of select="string(AssetZoomRegionsBoundsLat)" />
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(AssetZoomRegionsBoundsLon) != ''">
										<xsl:element name="AssetZoomRegionsBoundsLon">
											<xsl:value-of select="string(AssetZoomRegionsBoundsLon)" />
										</xsl:element>
									</xsl:if>
								</xsl:element>
							</xsl:for-each>
							<xsl:for-each select="$var_base/AssetCoordinate">
								<xsl:element name="AssetCoordinate">
									<xsl:if test="string($var_base/entity_created_date) != ''">
										<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string($var_base/entity_created_date)" />
											</xsl:attribute>
									</xsl:if>
									<xsl:if test="string(longitude) != ''">
										<xsl:element name="AssetLongitude">
											<xsl:value-of select="string(longitude)" />
										</xsl:element>
									</xsl:if>

									<xsl:if test="string(latitude) != ''">
										<xsl:element name="AssetLatitude">
											<xsl:value-of select="string(latitude)" />
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(precision) != ''">
										<xsl:element name="AssetCoordinatePrecision">
											<xsl:value-of select="string(precision)" />
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(supplier_id) != '' or string(supplier) != ''">
										<xsl:element name="AssetCoordinateSupplier">
											<xsl:if test="string(supplier_id) != ''">
												<xsl:element name="AssetCoordinateSupplierID">
													<xsl:call-template name="el_relation_id">
														<xsl:with-param name="el" select="supplier_id" />
													</xsl:call-template>
												</xsl:element>
											</xsl:if>
											<xsl:if test="string(supplier) != ''">
												<xsl:element name="AssetCoordinateSupplier">
													<xsl:attribute name="languageId">
															<xsl:value-of select="string(number('505062'))" />
														</xsl:attribute>
													<xsl:value-of select="string(supplier)" />
												</xsl:element>
											</xsl:if>
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(type) != ''">
										<xsl:element name="AssetCoordinateType">
											<xsl:attribute name="languageId">
													<xsl:value-of select="string(number('505062'))" />
												</xsl:attribute>
											<xsl:value-of select="string(type)" />
										</xsl:element>
									</xsl:if>
									<xsl:if test="string(accuracy) != ''">
										<xsl:element name="AssetCoordinateAccuracy">
											<xsl:attribute name="languageId">
													<xsl:value-of select="string(number('505062'))" />
												</xsl:attribute>
											<xsl:value-of select="string(accuracy)" />
										</xsl:element>
									</xsl:if>
								</xsl:element>
							</xsl:for-each>
							<xsl:for-each select="$var_base/AssetCommodityType">
								<xsl:if test="child::*">
									<xsl:element name="AssetCommodityType">
										<xsl:if test="string($var_base/entity_created_date) != ''">
											<xsl:attribute name="effectiveFrom">
													<xsl:value-of select="string($var_base/entity_created_date)" />
												</xsl:attribute>
										</xsl:if>

										<xsl:if test="string(commodity_type_id) != ''">
											<xsl:element name="AssetCommodityTypeID">
												<xsl:call-template name="el_relation_id">
													<xsl:with-param name="el" select="commodity_type_id" />
												</xsl:call-template>
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(commodity_typ_rcs) != ''">
											<xsl:element name="AssetCommodityTypeRCS">
												<xsl:value-of select="string(commodity_typ_rcs)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(commodity_type_value) != ''">
											<xsl:element name="AssetCommodityType">
												<xsl:attribute name="languageId">
													<xsl:value-of select="string(number('505062'))" />
												</xsl:attribute>
												<xsl:value-of select="string(commodity_type_value)" />
											</xsl:element>
										</xsl:if>

										<xsl:if test="string(commodity_type_io) != ''">
											<xsl:element name="AssetCommodityTypeIO">
												<xsl:attribute name="languageId">
													<xsl:value-of select="string(number('505062'))" />
												</xsl:attribute>
												<xsl:value-of select="string(commodity_type_io)" />
											</xsl:element>
										</xsl:if>
										<xsl:if test="string(commodity_type_rank) != ''">
											<xsl:element name="AssetCommodityTypeRank">
												<xsl:value-of select="string(commodity_type_rank)" />
											</xsl:element>
										</xsl:if>
									</xsl:element>
								</xsl:if>
							</xsl:for-each>
							<xsl:for-each select="AssetOrganisation">
								<AssetOrganisation>
									<xsl:for-each select="$var_base/entity_created_date">
										<xsl:attribute name="effectiveFrom">
												<xsl:value-of select="string(.)" />
											</xsl:attribute>
									</xsl:for-each>
									<xsl:for-each select="org_perm_id">
										<xsl:if test="child::text()">
											<AssetOrganisationID>
												<xsl:call-template name="el_relation_id">
													<xsl:with-param name="el" select="." />
												</xsl:call-template>
											</AssetOrganisationID>
										</xsl:if>
									</xsl:for-each>
									<xsl:for-each select="organisation_name">
										<AssetOrganisationName>
											<xsl:attribute name="languageId">
													<xsl:value-of select="string(number('505062'))" />
												</xsl:attribute>
											<xsl:value-of select="string(.)" />
										</AssetOrganisationName>
									</xsl:for-each>
									<xsl:for-each select="aoa_type">
										<AssetOrganisationRole>
											<xsl:value-of select="string(.)" />
										</AssetOrganisationRole>
									</xsl:for-each>
									<xsl:for-each select="percentage">
										<AssetOrganisationPercentage>
											<xsl:value-of select="string(.)" />
										</AssetOrganisationPercentage>
									</xsl:for-each>
									<xsl:for-each select="aoa_rank">
										<AssetOrganisationRank>
											<xsl:value-of select="string(.)" />
										</AssetOrganisationRank>
									</xsl:for-each>
								</AssetOrganisation>
							</xsl:for-each>
							<xsl:for-each select="asset_rank">
								<AssetRank>
									<xsl:value-of select="string(.)" />
								</AssetRank>
							</xsl:for-each>
						</xsl:element>
					</xsl:for-each>
				</xsl:element>
			</xsl:for-each>
		</xsl:element>

	</xsl:template>
</xsl:stylesheet>